generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Attendance {
  id                            Int                             @id
  time                          DateTime                        @db.Timestamp(6)
  description                   String?                         @db.VarChar
  employee                      Int
  Employee                      Employee                        @relation(fields: [employee], references: [id], onDelete: NoAction, onUpdate: NoAction)
  AttendanceCorrectionRequest   AttendanceCorrectionRequest[]
  AttendanceValidatorAttendance AttendanceValidatorAttendance[]
  ManagerAttendanceSubmission   ManagerAttendanceSubmission[]
}

model AttendanceCorrectionRequest {
  id          Int         @id
  time        DateTime?   @db.Timestamp(6)
  attendance  Int?
  attester    Int?
  accepted    Boolean?
  description String?     @db.VarChar
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  Attendance  Attendance? @relation(fields: [attendance], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User        User?       @relation(fields: [attester], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model AttendanceValidator {
  id                            Int                             @id
  name                          String?                         @db.VarChar
  type                          attendance_validator_type
  AttendanceValidatorAttendance AttendanceValidatorAttendance[]
  QRCode                        QRCode[]
}

model AttendanceValidatorAttendance {
  attendance_validator Int
  attendence           Int
  AttendanceValidator  AttendanceValidator @relation(fields: [attendance_validator], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Attendance           Attendance          @relation(fields: [attendence], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([attendance_validator, attendence])
}

model Company {
  id       Int        @id
  name     String     @db.VarChar
  Employee Employee[]
}

model Employee {
  id                   Int                    @id
  name                 String                 @db.VarChar
  user                 Int
  company              Int
  Company              Company                @relation(fields: [company], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User                 User                   @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Attendance           Attendance[]
  WorkScheduleEmployee WorkScheduleEmployee[]
}

model ManagerAttendanceSubmission {
  attendance Int
  manager    Int
  Attendance Attendance @relation(fields: [attendance], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User       User       @relation(fields: [manager], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([attendance, manager])
}

model OvertimeWorkApproval {
  id       Int      @id
  start    DateTime @db.Timestamp(6)
  end      DateTime @db.Timestamp(6)
  approver Int
  User     User     @relation(fields: [approver], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model QRCode {
  qrcode_generator     Int
  attendance_validator Int
  public_key           String              @db.VarChar
  created_at           DateTime            @db.Timestamp(6)
  AttendanceValidator  AttendanceValidator @relation(fields: [attendance_validator], references: [id], onDelete: NoAction, onUpdate: NoAction)
  QRCodeGenerator      QRCodeGenerator     @relation(fields: [qrcode_generator], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([qrcode_generator, attendance_validator])
}

model QRCodeGenerator {
  id          Int      @id
  name        String?  @db.VarChar
  private_key String   @db.VarChar
  QRCode      QRCode[]
}

model TimeRange {
  id                    Int                     @id
  start                 DateTime                @db.Time(6)
  end                   DateTime                @db.Time(6)
  WorkScheduleTimeRange WorkScheduleTimeRange[]
}

model User {
  id                          Int                           @id
  username                    String                        @db.VarChar
  password                    String                        @db.VarChar
  user_role                   user_role
  AttendanceCorrectionRequest AttendanceCorrectionRequest[]
  Employee                    Employee[]
  ManagerAttendanceSubmission ManagerAttendanceSubmission[]
  OvertimeWorkApproval        OvertimeWorkApproval[]
}

model WorkSchedule {
  id                    Int                     @id
  description           String?                 @db.VarChar
  workable              Boolean
  WorkScheduleEmployee  WorkScheduleEmployee[]
  WorkScheduleTimeRange WorkScheduleTimeRange[]
}

model WorkScheduleEmployee {
  work_schedule Int
  employee      Int
  Employee      Employee     @relation(fields: [employee], references: [id], onDelete: NoAction, onUpdate: NoAction)
  WorkSchedule  WorkSchedule @relation(fields: [work_schedule], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([work_schedule, employee])
}

model WorkScheduleTimeRange {
  work_schedule Int
  time_range    Int
  repeat_days   String       @db.Bit(7)
  TimeRange     TimeRange    @relation(fields: [time_range], references: [id], onDelete: NoAction, onUpdate: NoAction)
  WorkSchedule  WorkSchedule @relation(fields: [work_schedule], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([work_schedule, time_range])
}

enum attendance_validator_type {
  QRCode
}

enum user_role {
  basic
  manager
  admin
}
